{"ast":null,"code":"var _jsxFileName = \"/Users/subbukethineni/Desktop/connectppl/frontend/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { fetchMessages } from \"../services/messageService\";\nimport Message from \"./Message\";\nimport socket from \"../socket/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  roomId\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const getMessages = async () => {\n      try {\n        const messages = await fetchMessages(roomId, user.token);\n        setMessages(messages);\n      } catch (err) {\n        setError(\"Failed to fetch messages\");\n      }\n    };\n    if (user) {\n      getMessages();\n    }\n\n    // Connect to socket after login\n    socket.connect();\n\n    // Listen for incoming messages\n    socket.on(\"receiveMessage\", message => {\n      setMessages(prev => [...prev, message]);\n    });\n    return () => socket.disconnect();\n  }, [roomId, user]);\n  const sendMessage = async () => {\n    if (newMessage.trim()) {\n      const message = await messageService.sendMessage(newMessage, roomId);\n      socket.emit(\"sendMessage\", message);\n      setNewMessage(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        message: message,\n        currentUser: user.username\n      }, message._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newMessage,\n      onChange: e => setNewMessage(e.target.value),\n      placeholder: \"Type your message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"f0L88MzyhDeJdD7pPTWIyjEzzhM=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useContext","AuthContext","fetchMessages","Message","socket","jsxDEV","_jsxDEV","Chat","roomId","_s","user","messages","setMessages","newMessage","setNewMessage","error","setError","getMessages","token","err","connect","on","message","prev","disconnect","sendMessage","trim","messageService","emit","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","map","currentUser","username","_id","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/subbukethineni/Desktop/connectppl/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { fetchMessages } from \"../services/messageService\";\nimport Message from \"./Message\";\nimport socket from \"../socket/socket\";\n\nconst Chat = ({ roomId }) => {\n  const { user } = useContext(AuthContext);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const getMessages = async () => {\n      try {\n        const messages = await fetchMessages(roomId, user.token);\n        setMessages(messages);\n      } catch (err) {\n        setError(\"Failed to fetch messages\");\n      }\n    };\n\n    if (user) {\n      getMessages();\n    }\n\n    // Connect to socket after login\n    socket.connect();\n\n    // Listen for incoming messages\n    socket.on(\"receiveMessage\", (message) => {\n      setMessages((prev) => [...prev, message]);\n    });\n\n    return () => socket.disconnect();\n  }, [roomId, user]);\n\n  const sendMessage = async () => {\n    if (newMessage.trim()) {\n      const message = await messageService.sendMessage(newMessage, roomId);\n      socket.emit(\"sendMessage\", message);\n      setNewMessage(\"\");\n    }\n  };\n\n  return (\n    <div>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      <h2>Chat Room</h2>\n      <ul>\n        {messages.map((message) => (\n          <Message\n            key={message._id}\n            message={message}\n            currentUser={user.username}\n          />\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        value={newMessage}\n        onChange={(e) => setNewMessage(e.target.value)}\n        placeholder=\"Type your message...\"\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}